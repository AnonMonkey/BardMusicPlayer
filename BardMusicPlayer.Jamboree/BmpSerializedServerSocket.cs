/*
 * Copyright(c) 2021 isaki
 * Licensed under the GPL v3 license. See https://github.com/BardMusicPlayer/BardMusicPlayer/blob/develop/LICENSE for full license information.
 */

using System;

namespace BardMusicPlayer.Jamboree
{
    sealed internal class BmpSerializedServerSocket : ISerializedServerSocket
    {
        private readonly ISerializationAdapter serializer;
        private readonly IServerSocket listener;
        private bool disposedValue;
        private volatile bool active;

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="serializer"></param>
        /// <param name="listener"></param>
        internal BmpSerializedServerSocket(ISerializationAdapter serializer, IServerSocket listener)
        {
            this.serializer = serializer ?? throw new ArgumentNullException();
            this.listener = listener ?? throw new ArgumentNullException();
            this.disposedValue = false;
            this.active = true;
        }

        /// <inheritdoc/>
        public ISerializedSocket Accept()
        {
            if (!this.active)
            {
                throw new SocketException("Unable to accept incoming connections on inactive server socket");
            }

            ISocket accepted = this.listener.Accept();
            return new BmpSerializedSocket(this.serializer, accepted);
        }

        /// <inheritdoc/>
        public void Close()
        {
            try
            {
                this.listener.Close();
            }
            finally
            {
                this.active = false;
            }
        }

        /// <inheritdoc/>
        public bool IsBound()
        {
            return this.listener.IsBound();
        }

        /// <inheritdoc/>
        public bool IsClosed()
        {
            return this.listener.IsClosed();
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Dispose pattern generated by VS2019.
        /// </summary>
        /// <param name="disposing"></param>
        private void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    try
                    {
                        this.Close();
                    }
                    catch (Exception)
                    {
                        // Nothing to do here.
                    }
                    finally
                    {
                        this.listener.Dispose();
                    }
                }

                disposedValue = true;
            }
        }
    }
}
